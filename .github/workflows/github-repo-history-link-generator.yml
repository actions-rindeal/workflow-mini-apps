## SPDX-FileCopyrightText: ANNO DOMINI 2024 Jan Chren ~rindeal <dev.rindeal{a}gmail.com>
## SPDX-License-Identifier: GPL-3.0-only

name: "Generate GitHub.com URL for browsing repo history since initial commit"

run-name: "${{ toJSON(github.event.inputs) }}"

on:
  workflow_dispatch:
    inputs:
      'repo':
        description: 'OWNER/REPO or URL (may include branch)'
        required: true
        type: string
      'branch':
        description: 'Target branch, default is the HEAD branch'
        required: false
        type: string
        default: ''
      'since-ref':
        description: 'Ref from which the history will be browsable, default is from the initial commit of the branch'
        required: false
        type: string
        default: ''

jobs:
  'generate-url':
    runs-on: ubuntu-latest
    defaults:
      run:
        # -o noclobber: prevent existing regular files from being overwritten by redirection of output
        # -o noexec: This option will not execute commands; itâ€™s useful for checking a script for syntax errors.
        # -o verbose -o xtrace
        shell: 'bash --noprofile --norc -o errexit -o pipefail -o nounset   -o verbose -o xtrace    {0}'
    steps:
      - name: 'Validate inputs'
        id: 'validate-inputs'
        env:
          REPO: ${{ inputs.repo }}
          BRANCH: ${{ inputs.branch }}
          SINCE_REF: ${{ inputs.since-ref }}
        run: |
          set-failed() { printf "::error title=$1::${2-$1}\n" "${@:2}" ; exit 123 ; }

          REPO="${REPO//[[:space:]]/}"
          if [[ "$REPO" =~ ^https://github.com/ ]]; then
            REPO="${REPO#https://github.com/}"
            IFS='/' read -ra ADDR <<< "$REPO"
            OWNER="${ADDR[0]}"
            REPO_NAME="${ADDR[1]}"
            if (( ${#ADDR[@]} > 2 )) && [[ "${ADDR[2]}" == "tree" ]] ; then
              BRANCH="$(IFS='/'; printf "%s" "${ADDR[*]:3}")"
              BRANCH="${BRANCH%%\?*}"
            fi
            REPO="${OWNER}/${REPO_NAME}"
            REPO="${REPO%.git}"
          fi
          BRANCH="${BRANCH//[[:space:]]/}"
          SINCE_REF="${SINCE_REF//[[:space:]]/}"
          [[ -z "$REPO" ]] && set-failed 'No "repo" input provided.'
          [[ -z "$BRANCH" ]] && set-failed 'No "branch" input provided.'
          if [[ ! "$REPO" =~ ^[a-zA-Z0-9_.-]+\/[a-zA-Z0-9_.-]+$ ]]; then
            set-failed 'Invalid "repo" format.' "Please check the input value: '%s'" "$REPO"
            exit 1
          fi
          if [[ ! "$BRANCH" =~ ^[a-zA-Z0-9_./-]+$ ]]; then
            set-failed 'Invalid "branch" format.' Please check the input value: '%s'" "$BRANCH"
            exit 1
          fi
          printf "REPO=%s\n" "$REPO" >> $GITHUB_ENV
          printf "BRANCH=%s\n" "$BRANCH" >> $GITHUB_ENV
          printf "SINCE_REF=%s\n" "$SINCE_REF" >> $GITHUB_ENV

      - name: 'Checkout repository'
        uses: 'actions/checkout@v4'
        with:
          repository: ${{ env.REPO }}
          ref: ${{ env.BRANCH }}
          fetch-depth: 0
          sparse-checkout: '.'

      - name: 'Generate URL'
        id: 'generate-url'
        run: |
          if [[ -z "${SINCE_REF}" ]] ; then
            SINCE_REF="$(git rev-list --max-parents=0 "${BRANCH}")"
          fi
          REV_LIST=$(git rev-list -n1 ${BRANCH})
          REV_COUNT=$(git rev-list --count "${SINCE_REF}..${BRANCH}")
          URL_SUFFIX="?after=${REV_LIST}+$(( "${REV_COUNT}" - 1 ))"
          printf "RELATIVE_URL=../../commits/%s/%s\n" "${BRANCH}" "${URL_SUFFIX}" >> $GITHUB_ENV
          printf "ABSOLUTE_URL=https://github.com/%s/commits/%s/%s\n" "${REPO}" "${BRANCH}" "${URL_SUFFIX}" >> $GITHUB_ENV

      - name: 'Print URL'
        run: |
          printf "::notice::The relative URL for viewing GitHub Commit history is:\n%s\n" "$RELATIVE_URL"
          printf "::notice::The absolute URL for viewing GitHub Commit history is:\n%s\n" "$ABSOLUTE_URL"

          printf "### The **relative** URL for viewing GitHub Commit history is:\n" >> $GITHUB_STEP_SUMMARY
          printf "[Relative URL][relative-url]\n" >> $GITHUB_STEP_SUMMARY
          printf '```url\n' >> $GITHUB_STEP_SUMMARY
          printf "%s\n" "${RELATIVE_URL}" >> $GITHUB_STEP_SUMMARY
          printf '```\n' >> $GITHUB_STEP_SUMMARY
          
          printf "### The **absolute** URL for viewing GitHub Commit history is:\n" >> $GITHUB_STEP_SUMMARY
          printf "[Absolute URL][absolute-url]\n" >> $GITHUB_STEP_SUMMARY
          printf '```url\n' >> $GITHUB_STEP_SUMMARY
          printf "%s\n" "${ABSOLUTE_URL}" >> $GITHUB_STEP_SUMMARY
          printf '```\n' >> $GITHUB_STEP_SUMMARY
          
          printf "\n" >> $GITHUB_STEP_SUMMARY
          printf "[relative-url]: %s\n" "$RELATIVE_URL" >> $GITHUB_STEP_SUMMARY
          printf "[absolute-url]: %s\n" "$ABSOLUTE_URL" >> $GITHUB_STEP_SUMMARY
